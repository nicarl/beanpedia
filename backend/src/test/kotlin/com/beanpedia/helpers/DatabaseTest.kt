package com.beanpedia.helpers

import db.migration.V1__initial_migration
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.SchemaUtils
import org.jetbrains.exposed.sql.transactions.TransactionManager
import org.jetbrains.exposed.sql.transactions.transaction
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.TestInstance
import kotlin.random.Random

/**
 * A test helper that creates an in-memory database for the lifetime of the test.
 *
 * @property databaseName The name of the temporary database. Randomly generated by default.
 * @property tables An array of tables to initialize. Will be dropped and created before each individual test.
 */
@TestInstance(TestInstance.Lifecycle.PER_METHOD)
open class DatabaseTest(
    private val databaseName: String = "test_db_${Random.nextInt(0, 9999)}"
) {

    @Suppress("MemberVisibilityCanBePrivate")
    protected val database = Database.connect(
        "jdbc:h2:mem:$databaseName;DB_CLOSE_DELAY=-1;IGNORECASE=true;",
        driver = "org.h2.Driver"
    )

    @Suppress("UnusedPrivateMember")
    @BeforeEach
    private fun databaseSetUp() {
        transaction {
            SchemaUtils.dropDatabase()
        }
        V1__initial_migration().migrate(null)
    }

    @Suppress("UnusedPrivateMember")
    @AfterEach
    private fun databaseTearDown() = TransactionManager.closeAndUnregister(database)
}
